{"version":3,"file":"static/js/302.b434a8bb.chunk.js","mappings":"wOACA,EAAuB,qBAAvB,EAAoD,sBAApD,EAAiF,qBAAjF,EAA2G,mBAA3G,EAAwI,wBAAxI,EAAsK,oB,SCuBtK,EArBqB,SAAC,GAAe,IAAbA,EAAY,EAAZA,OAGdC,GAAWC,EAAAA,EAAAA,MAEjB,OACI,+BAEA,eAAIC,UAAWC,EAAf,SACCJ,EAAOK,KAAI,SAAAC,GAAK,OACb,eACgBH,UAAWC,EAD3B,UAEI,SAAC,KAAD,CAAMD,UAAWC,EAAQG,GAAE,kBAAaD,EAAME,IAAMC,MAAOR,EAA3D,UAAqE,wBAAKK,EAAMI,WAD9EJ,EAAME,GAFC,OAUxB,EC6DD,EA3Ee,WAEX,OAAkBG,EAAAA,EAAAA,UAAS,IAA3B,eAAOC,EAAP,KAAUC,EAAV,KACA,GAA4BF,EAAAA,EAAAA,UAAS,IAArC,eAAOX,EAAP,KAAec,EAAf,KAEMC,GAAWC,EAAAA,EAAAA,MACXf,GAAWC,EAAAA,EAAAA,MAMjB,GAAuBe,EAAAA,EAAAA,MAAhBC,GAAP,eA+BA,OAXIC,EAAAA,EAAAA,YAAU,WACV,IAAMC,EAASF,EAAaG,IAAI,KAC5BD,IACJE,EAAAA,EAAAA,IAAWF,GACVG,MAAK,SAAAC,GAAQ,OAAEV,EAAUU,EAASC,QAArB,IACbC,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,EAAhB,GAEb,GAAE,CAACT,KAKD,iCACC,kBAAMY,SA9BW,SAACC,GAClBA,EAAEC,iBACe,KAAbpB,EAAEqB,SACFC,MAAM,0IACNrB,EAAK,MAGTS,EAAAA,EAAAA,IAAWV,GACVW,MAAK,SAAAC,GAAQ,OAAEV,EAAUU,EAASC,QAArB,IACbC,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,EAAhB,IAEVZ,EAAS,MAAD,OAAOH,GAAK,CAChBH,MAAOR,EAASQ,OAGnB,EAe6BN,UAAWC,EAAzC,WACI,kBACI+B,KAAK,OACLC,aAAa,MACbC,WAAS,EACTC,YAAY,mBACZC,KAAK,IACLC,MAAO5B,EACP6B,SA7Cc,SAACV,GACvBlB,EAAKkB,EAAEW,cAAcF,MAAMG,cAC9B,EA4CWxC,UAAWC,KAEf,mBAAQD,UAAWC,EAAO+B,KAAK,SAA/B,uBAEe,IAAlBnC,EAAO4C,SAAgB,SAAC,EAAD,CAAc5C,OAAQA,MAerD,C,4MC/EK6C,EAAU,mCAGHC,EAAW,mCAAG,6GAEAC,IAAAA,IAAA,kEAAqEF,IAFrE,cAEjBrB,EAFiB,yBAIhBA,EAASwB,MAJO,gCAOvBd,MAAM,EAAD,IAPkB,yDAAH,qDAYXe,EAAU,mCAAG,WAAOC,GAAP,gGAECH,IAAAA,IAAA,6CAAgDG,EAAhD,oBAAmEL,EAAnE,oBAFD,cAEhBrB,EAFgB,yBAGfA,EAASwB,MAHM,gCAMtBd,MAAK,MANiB,yDAAH,sDAWViB,EAAa,mCAAG,WAAOD,GAAP,gGAEFH,IAAAA,IAAA,6CAAgDG,EAAhD,4BAA2EL,EAA3E,oBAFE,cAEnBrB,EAFmB,yBAIlBA,EAASwB,MAJS,gCAOzBd,MAAK,MAPoB,yDAAH,sDAWbkB,EAAU,mCAAG,WAAOF,GAAP,gGAECH,IAAAA,IAAA,6CAAgDG,EAAhD,4BAA2EL,EAA3E,oBAFD,cAEhBrB,EAFgB,yBAIfA,EAASwB,MAJM,gCAOtBd,MAAK,MAPiB,yDAAH,sDAWVZ,EAAU,mCAAG,WAAO+B,GAAP,uFACAN,IAAAA,IAAA,4DAA+DF,EAA/D,kBAAgFQ,IADhF,cAClB7B,EADkB,yBAEjBA,EAASwB,MAFQ,2CAAH,qD","sources":["webpack://goit-react-hw-05-movies/./src/Pages/Movies/Movies.module.css?d262","Pages/Movies/RenderSearch.jsx","Pages/Movies/Movies.jsx","apiService.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"form\":\"Movies_form__gVl+9\",\"input\":\"Movies_input__mpzwV\",\"link\":\"Movies_link__rzVI3\",\"li\":\"Movies_li__t1-+G\",\"gallery\":\"Movies_gallery__N99BZ\",\"btn\":\"Movies_btn__MGUMg\"};","import {Link, useLocation} from 'react-router-dom';\nimport s from '../Movies/Movies.module.css';\n\nconst RenderSearch = ( {movies}) => {\n    \n\n    const location = useLocation();\n\n    return(\n        <>\n        \n        <ul className={s.gallery}>\n        {movies.map(movie=>(\n            <li\n            key ={movie.id} className={s.li}>\n                <Link className={s.link} to={`/movies/${movie.id}`} state={location}><h2>{movie.title}</h2></Link>\n            </li>\n        ))}\n            \n    </ul>\n    </>\n    )\n}\n\nexport default RenderSearch","\nimport {useEffect, useState} from 'react';\nimport { useLocation, useNavigate, useSearchParams } from 'react-router-dom';\nimport {searchFilm} from '../../apiService';\nimport s from './Movies.module.css';\n\nimport RenderSearch from './RenderSearch';\n\nconst Movies = () => {\n\n    const [q, setQ] = useState('')\n    const [movies, setMovies] = useState([])\n\n    const navigate = useNavigate();\n    const location = useLocation();\n\n    const handleQueryChange = (e) =>{\n        setQ(e.currentTarget.value.toLowerCase())\n    }\n\n    const [searchParams] = useSearchParams();\n\n\n    const handleSubmit = (e) => {\n        e.preventDefault()\n        if (q.trim() === \"\"){\n            alert(\"Введите поисковой запрос\")\n            setQ('')\n        }\n        \n        searchFilm(q)\n        .then(response=>setMovies(response.results))\n        .catch(err => console.log(err));\n\n        navigate(`?q=${q}`, {\n            state: location.state,\n          });\n\n        }\n        \n        useEffect(()=>{\n        const querry = searchParams.get('q')\n        if(!querry) return;\n        searchFilm(querry)\n        .then(response=>setMovies(response.results))\n        .catch(err => console.log(err));\n\n    }, [searchParams])\n\n// console.log(location);\n\n    return (\n       <>\n        <form onSubmit={handleSubmit} className={s.form} >\n            <input\n                type=\"text\"\n                autoComplete=\"off\"\n                autoFocus\n                placeholder=\"Search movies...\"\n                name=\"q\"\n                value={q} \n                onChange = {handleQueryChange}\n                className={s.input}\n                />\n            <button className={s.btn} type='submit'>Search</button>    \n        </form>\n        {movies.length !== 0 && <RenderSearch movies={movies}/>}\n        {/* {q !== \"\" && \n        <ul className={s.gallery}>\n        {movies.map(movie=>(\n            <li\n            key ={movie.id} className={s.li}>\n                <Link className={s.link} to={`/movies/${movie.id}`} state={location}><h2>{movie.title}</h2></Link>\n            </li>\n        ))}\n            \n    </ul>} */}\n        </>\n\n        \n    )\n}\n\nexport default Movies","import axios from 'axios';\n\nconst API_KEY = '53540339dd7e56b42abfb648d96f315b'\n\n\nexport const getTrending = async () => {\n  try{\n    const response = await axios.get(`https://api.themoviedb.org/3/trending/movie/day?api_key=${API_KEY}`)\n\n    return response.data;\n  }\n  catch (error) {\n    alert(error)\n  }\n};\n\n\nexport const getOneFilm = async (movieId) => {\n  try{\n    const response = await axios.get(`https://api.themoviedb.org/3/movie/${movieId}?api_key=${API_KEY}&language=en-US`);\n    return response.data;\n  } \n  catch (error) {\n    alert (error)\n  }\n}\n\n\nexport const getCastActors = async (movieId) => {\n  try{\n    const response = await axios.get(`https://api.themoviedb.org/3/movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`);\n    // console.log(response.data);\n    return response.data\n  }\n  catch (error) {\n    alert (error)\n  }\n}\n\nexport const getReviews = async (movieId) => {\n  try{\n    const response = await axios.get(`https://api.themoviedb.org/3/movie/${movieId}/reviews?api_key=${API_KEY}&language=en-US`);\n    // console.log(response.data);\n    return response.data\n  }\n  catch (error) {\n    alert (error)\n  }\n}\n\nexport const searchFilm = async (query) => {\n  const response =  await axios.get(`https://api.themoviedb.org/3/search/movie?api_key=${API_KEY}&query=${query}`)\n  return response.data\n}\n\n\nexport  const getGenres = async () => {\n  const response = await axios.get(\n    `https://api.themoviedb.org/3/genre/movie/list?api_key=${API_KEY}&language=en-US`\n  );\n\n  return response.data.genres;\n}\n\n\n\n"],"names":["movies","location","useLocation","className","s","map","movie","to","id","state","title","useState","q","setQ","setMovies","navigate","useNavigate","useSearchParams","searchParams","useEffect","querry","get","searchFilm","then","response","results","catch","err","console","log","onSubmit","e","preventDefault","trim","alert","type","autoComplete","autoFocus","placeholder","name","value","onChange","currentTarget","toLowerCase","length","API_KEY","getTrending","axios","data","getOneFilm","movieId","getCastActors","getReviews","query"],"sourceRoot":""}